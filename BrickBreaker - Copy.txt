import javax.swing.JFrame;
import java.awt.*;
import java.util.*;
import java.awt.RenderingHints.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.Image.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.*;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.BasicStroke;

import java.awt.RenderingHints.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.*;
import javax.swing.JPanel;

public class BBMain {
public static final int WIDTH=800;
public static final int HEIGHT=480;
public static void main(String []args) {
	JFrame theFrame =new JFrame("Brick Breaker");
	
	GamePanel thePanel = new GamePanel();
	Thread theThread =new Thread(thePanel);
	
	theFrame.setLocationRelativeTo(null);
	theFrame.setResizable(false);
	theFrame.setSize(WIDTH,HEIGHT);
	
	theFrame.add(thePanel);
	theThread.start();
	theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	theFrame.setVisible(true);	
}
}

class GamePanel extends JPanel implements Runnable{
	
private	boolean running;
	private BufferedImage image;
	private Graphics2D g;
	private  MyMouseMotionListener theMouseListener;
	private int mousex;
	private Ball theball;
	private Paddle thePaddle;
	private Map theMap;
	private HUD theHud;
	
	
public GamePanel() {
	init();
}
public void init() {
	mousex=0;
	theball=new Ball();
	thePaddle=new Paddle();
	theMap=new Map(6,10);
	theHud =new HUD();
	theMouseListener =new  MyMouseMotionListener();
	
	addMouseMotionListener(theMouseListener);
	running=true;
	image=new BufferedImage(BBMain.WIDTH,BBMain.HEIGHT,BufferedImage.TYPE_INT_RGB);
	g=(Graphics2D) image.getGraphics();
	g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
}


//override
public void run() {
	while(running) {
		update();
		draw();
		repaint();
		try {
			Thread.sleep(10);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
}
public void checkCollision() {
	Rectangle ballsRect =theball.getRect();
	Rectangle paddleRect =thePaddle.getRect();
	if(ballsRect.intersects(paddleRect)) {
		theball.setDY(-theball.getDY());
	if(theball.getX()<mousex+thePaddle.getWidth()/4) {
		theball.setDX(theball.getDX()-.5);
	}
	if(theball.getX()<mousex+thePaddle.getWidth() && theball.getX()>mousex+thePaddle.getWidth()/4) {
		theball.setDX(theball.getDX()+.5);
	}
	}
	
A:	for(int row=0;row<theMap.getMapArray().length;row++) {
		for(int col=0;col<theMap.getMapArray()[0].length;col++) {
			if(theMap.getMapArray()[row][col]>0) {
			int brickx=col*theMap.getBrickWidth()+theMap.HOR_PAD;
			int bricky=row*theMap.getBrickHeight()+theMap.VERT_PAD;
			int brickWidth=theMap.getBrickWidth();
			int brickHeight=theMap.getBrickHeight();
			
			Rectangle brickRect=new Rectangle(brickx,bricky,brickWidth,brickHeight);
			if(ballsRect.intersects(brickRect)) {
			
			theMap.hitBrick(row, col);
			theball.setDY(-theball.getDY());
			theHud.addScore(50);
			break A;
		}}}
	}
	
}
public void update() {
	checkCollision();
	theball.update();
	
}
public void draw() {
	g.setColor(Color.white);
	g.fillRect(0, 0,BBMain.WIDTH,BBMain.HEIGHT);
	theMap.draw(g);
	theball.draw(g);
	thePaddle.draw(g);
	theHud.draw(g);
	
	
	if(theMap.isThereMin()==true) {
		running=false;
		drawWin();}
	
}
public void drawWin() {
	g.setColor(Color.red);
	g.setFont(new Font("Courier New",Font.BOLD,50));
	g.drawString("Winner!!", 200, 200);
}

public void paintComponent(Graphics g) {
	Graphics2D g2 =(Graphics2D) g;
	
	g2.setColor(Color.black);
	g2.fillOval(20, 20, 20, 60);
	g2.drawImage(image,0,0,BBMain.WIDTH,BBMain.HEIGHT,null);
	g2.dispose();
	}
private class MyMouseMotionListener implements MouseMotionListener{
	public void mouseDragged(MouseEvent e) {}
	public void mouseMoved(MouseEvent e) {
		mousex=e.getX();
		thePaddle.mouseMoved(e.getX());
	}
}
}

class Ball {
	private Rectangle ballRect;
	private double x,y,dx,dy;
	private int ballSize=30;
public Ball() {
	x=200;
	y=200;
	dx=1;
	dy=3;
}
public void update() {
	setPosition();
}
public void setPosition() {
	x+=dx;
	y+=dy;
	if(x<0) {
		dx=-dx;
	}
	if(y<0) {
		dy=-dy;
	}
	if(x>BBMain.WIDTH-ballSize) {
		dx=-dx;
	}
	if(y>BBMain.HEIGHT-ballSize) {
		dy=-dy;
	}
}


public void draw(Graphics2D g) {
	g.setColor(Color.DARK_GRAY);
	g.setStroke(new BasicStroke(4));
	g.drawOval((int)x,(int)y,ballSize,ballSize);
}
public Rectangle getRect() {
	return new Rectangle((int)x,(int)y,ballSize,ballSize);
}
public void setDY(double theDY){ dy=theDY;}

public double getDY() {return dy;}
public void setDX(double theDX) {dx=theDX;}
public double getDX() {return dx;}
public double getX() {return x;}
public boolean youLose() {
	boolean loser=false;
	if(y>BBMain.HEIGHT-ballSize*2) {
		loser=true;
	}
	return loser;
}
}


class Paddle {
	private Rectangle paddleRect;
	private double x;
	private int width,height;
	public final int YPOS=BBMain.HEIGHT-100;
public Paddle() {
	width=100;
	height=20;
	x=BBMain.WIDTH-width/2;
}
public void update() {}
public void draw(Graphics2D g) {
	g.setColor(Color.DARK_GRAY);
	g.fillRect((int)x, YPOS, width, height);
}
public void mouseMoved(int mouseXpos) {
	x=mouseXpos;
	if(x>BBMain.WIDTH-width){
		x=BBMain.WIDTH-width;
	}
	
}
public Rectangle getRect() {
	return new Rectangle((int)x,YPOS,width,height);
}
public int getWidth() {return width;} 
}
class Map {
private int [][]theMap;
private int brickHeight,brickWidth;
public final int HOR_PAD=50,VERT_PAD=50;
public Map(int row ,int col) {
	initMap(row,col);
	brickWidth=(BBMain.WIDTH-2*HOR_PAD)/col;
	brickHeight=(BBMain.HEIGHT/2-VERT_PAD*2)/row;
}
public void initMap(int row ,int col) {
	theMap=new int[row][col];
	for(int i=0;i<theMap.length;i++) {
		for(int j=0;j<theMap[0].length;j++) {
			int r=(int)(Math.random()*4+1);
			theMap[i][j]=r;
	}}
	theMap[3][2]=4;
	theMap[3][6]=5;
}
public void draw(Graphics2D g) {
	
	for(int row=0;row<theMap.length;row++) {
		for(int col=0;col<theMap[0].length;col++) {
			if(theMap[row][col]>0) {
			if(theMap[row][col]==1) {
				g.setColor(new Color(200,200,200));
			}
			if(theMap[row][col]==2) {
				g.setColor(new Color(150,150,150));
			}
			if(theMap[row][col]==3) {
				g.setColor(new Color(100,100,100));
			}
			if(theMap[row][col]==PowerUp.WIDEPADDLE) {
				g.setColor(PowerUp.WIDECOLOR);
			}
			if(theMap[row][col]==PowerUp.FASTBALL) {
				g.setColor(PowerUp.FASTCOLOR);
			}
			
			g.setColor(Color.DARK_GRAY);
			g.fillRect(col*brickWidth+HOR_PAD, row*brickHeight+VERT_PAD, brickWidth, brickHeight);
			g.setStroke(new BasicStroke(2));
			g.setColor(Color.white);
			g.drawRect(col*brickWidth+HOR_PAD, row*brickHeight+VERT_PAD, brickWidth, brickHeight);
		}}
	}
}
public boolean isThereMin() {
	boolean thereIsMin=false;
	int brickRemaining=0;
	for(int row=0;row<theMap.length;row++) {
		for(int col=0;col<theMap[0].length;col++) {
			brickRemaining+=theMap[row][col];
		}
	}
	if(brickRemaining==0) {
		thereIsMin=true;
	}
	return thereIsMin;}
public int [][] getMapArray(){return theMap;}
public void setBrick(int row,int col,int value) {
	theMap[row][col]=value;}
public int getBrickWidth() {return brickWidth;}
public int getBrickHeight() {return brickHeight;}
public void hitBrick(int row,int col) {
	theMap[row][col]-=1;
	if(theMap[row][col]<0) {
		theMap[row][col]=0;
	}
}
}





class HUD {
	private int score;
	public HUD() {
		init();
	}
	public void init() {
		 score=0;
	}
	public void draw(Graphics2D g) {
		g.setFont(new Font("Courier New",Font.PLAIN,14));
		g.setColor(Color.red);
		g.drawString("Score:"+score,20,20);
	}
	public int getScore(){return score;}
	public void addScore(int scoreToAdd) {score+=scoreToAdd;}
}



class PowerUp {
private int x,y,dy,type,width,height;
private boolean isOnScreen;
private Color color;
public final static int WIDEPADDLE=4;
public final static int FASTBALL=5;
public final static Color WIDECOLOR=  Color.green;
public final static Color FASTCOLOR=Color.red;

public PowerUp(int xStart,int yStart,int theType,int DY,int theWidth,int theHeight) {
	x=xStart;
	y=yStart;
	type=theType;
	width=theWidth;
	height=theHeight;
	
	if(type<4) {type=4;}
	if(type>5) {type=5;}
	if(type==WIDEPADDLE) {color=WIDECOLOR;}
	if(type==FASTBALL) {color=FASTCOLOR;}
	
	dy=(int)(Math.random()*6+1);
}
public void draw(Graphics2D g) {
	g.setColor(color);
	g.fillRect(x, y, width, height);
}
public void update() {
	y+=dy;
	if(y>BBMain.HEIGHT) {
		isOnScreen=false;
	}
}
public int getX() {return x;}
public void setX(int newX) {
	x=newX;
}
public int getY() {return y;}
public void setY(int newY) {
	y=newY;
}
public int getDY() {return dy;}
public void setDY(int newDY) {
	dy=newDY;
}
public int getType() {return type;}
public boolean getIsOnScreen() {return isOnScreen;}
public void setIsOnScreen(boolean onScreen) {isOnScreen =onScreen;}
public Rectangle getRect() {
	return new Rectangle(x,y,width,height);
}
}










